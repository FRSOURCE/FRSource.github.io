{"mappings":"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","sources":["./src/logo.ctrl.ts"],"sourcesContent":["export class LogoCtrl {\n    private static maxGlitchTime = 600;\n    private static dpi = window.devicePixelRatio;\n\n    private static randInt (a: number = 0, b: number = 1) { return Math.random() * (b - a) + a; }\n    private static randIntNormalDistributed (a: number = 0, b: number = 1) {\n        let u = 0, v = 0;\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n        while(v === 0) v = Math.random();\n        const num = Math.abs(Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v )) + .1;\n        return (num > 3.8 ? 1 : (num > 1 ? num % 1 : (num > .1 && num < .4 ? num + Math.random() * .5 : (num < 0 ? 0 : num)))) * (b - a) + a;\n    }\n    private static asyncTimeout (timeout: number) {\n        return new Promise(resolve =>\n            setTimeout(resolve, timeout)\n        );\n    }\n\n    private lastVisibleItem = -1;\n\n    private resizeObserver = new window.ResizeObserver(this.onResize.bind(this));\n\n    private img: HTMLImageElement;\n    private ctx: CanvasRenderingContext2D;\n    private imgSize: {width: number; height: number};\n    private canvasSize: {width: number; height: number};\n\n    constructor (\n        public logo: SVGElement,\n        public canvas: HTMLCanvasElement,\n        public itemsToReveal: (HTMLElement | SVGElement)[],\n        public onFinish?: () => void\n    ) {\n        this.ctx = this.canvas.getContext('2d');\n        this.resizeObserver.observe(logo);\n        this.resizeObserver.observe(canvas);\n    }\n\n    private async onResize () {\n        await this.refreshSvgImage();\n        this.imgSize = this.logo.querySelector('g').getBoundingClientRect();\n        this.canvasSize = {width: this.canvas.offsetWidth, height: this.canvas.offsetHeight};\n        this.canvas.width = this.canvasSize.width * LogoCtrl.dpi;\n        this.canvas.height = this.canvasSize.height * LogoCtrl.dpi;\n        this.ctx.scale(LogoCtrl.dpi, LogoCtrl.dpi);\n    }\n\n    async init () {\n        await this.onResize();\n        \n        this.glitchTimeouted();\n        setTimeout(this.progressReveal.bind(this), 2500); // starting timeout\n    }\n\n    glitchImg () {\n        const imgWidth = this.imgSize.width * LogoCtrl.dpi;\n        const imgHeight = this.imgSize.height * LogoCtrl.dpi;\n        const canvasScale = Math.max(this.canvas.clientHeight/this.logo.clientHeight, this.canvas.clientWidth/this.logo.clientWidth);\n        if (Math.random() < .2) {\n            this.logo.style.visibility = 'hidden';\n        } else {\n            this.logo.style.visibility = null;\n            this.logo.style.transform = Math.random() < .7\n                ? `translate(${LogoCtrl.randIntNormalDistributed(-10, 10)}%, ${LogoCtrl.randIntNormalDistributed(-10, 10)}%)`\n                : 'none';\n        }\n\n        for (let i = 0; i < LogoCtrl.randInt(1, 13); ++i) {\n            const x = LogoCtrl.randIntNormalDistributed(0, 1);\n            const y = LogoCtrl.randIntNormalDistributed(0, 1);\n            const spliceWidth = LogoCtrl.randIntNormalDistributed(0, 1);\n            const spliceHeight = LogoCtrl.randIntNormalDistributed(0, 1);\n            // console.log(this.canvasSize.width, this.imgSize.width);\n\n            this.ctx.drawImage(\n                this.img,\n                x * imgWidth,\n                y * imgHeight,\n                spliceWidth * imgWidth * canvasScale,\n                spliceHeight * imgHeight * canvasScale,\n                LogoCtrl.randIntNormalDistributed(0, this.canvasSize.width - this.imgSize.width),\n                LogoCtrl.randIntNormalDistributed(0, this.canvasSize.height - this.imgSize.height),\n                // this.imgOffset.h + this.imgSize.h * y,\n                spliceWidth * this.imgSize.width,\n                spliceHeight * this.imgSize.height\n            );\n        }\n    }\n\n    async glitchTimeouted () {\n        this.logo.style.visibility = null;\n        await Promise.all(new Array(Math.round(LogoCtrl.randInt(.5, 3.4))).fill(0).map(async () => {\n            await LogoCtrl.asyncTimeout(LogoCtrl.randInt(550, 2500));\n            this.glitchImg();\n            await LogoCtrl.asyncTimeout(LogoCtrl.randInt(50, LogoCtrl.maxGlitchTime));\n        }));\n\n        this.ctx.clearRect(0, 0, this.canvasSize.width, this.canvasSize.height);\n        this.glitchTimeouted();\n    }\n\n    async progressReveal () {\n        if (this.lastVisibleItem === this.itemsToReveal.length - 1) {\n            return this.onFinish?.();\n        }\n\n        this.itemsToReveal[++this.lastVisibleItem].style.visibility = null;\n        await this.refreshSvgImage();\n        setTimeout(this.progressReveal.bind(this), LogoCtrl.randInt(200, 700));\n    }\n\n    async refreshSvgImage () {\n        const image = new Image();\n        const img = await new Promise<typeof image>(resolve => {\n            image.onload = resolve.bind(void 0, image);\n            const svgURL = new XMLSerializer().serializeToString(this.logo);\n            image.src = 'data:image/svg+xml; charset=utf8, ' + encodeURIComponent(svgURL);\n        });\n        return this.img = img;\n    }\n}\n"],"names":["LogoCtrl","logo","canvas","itemsToReveal","onFinish","_classCallCheck","this","_defineProperty","window","ResizeObserver","onResize","bind","ctx","getContext","resizeObserver","observe","a","arguments","length","undefined","b","Math","random","u","v","num","abs","sqrt","log","cos","PI","timeout","Promise","resolve","setTimeout","refreshSvgImage","imgSize","querySelector","getBoundingClientRect","canvasSize","width","offsetWidth","height","offsetHeight","dpi","scale","glitchTimeouted","progressReveal","imgWidth","imgHeight","canvasScale","max","clientHeight","clientWidth","style","visibility","transform","concat","randIntNormalDistributed","i","randInt","x","y","spliceWidth","spliceHeight","drawImage","img","all","Array","round","fill","map","_asyncToGenerator","regeneratorRuntime","mark","_callee3","wrap","_context3","prev","next","asyncTimeout","_this","glitchImg","maxGlitchTime","stop","clearRect","lastVisibleItem","_this$onFinish","call","image","Image","onload","svgURL","XMLSerializer","serializeToString","_this2","src","encodeURIComponent","devicePixelRatio"],"version":3,"file":"logo.ctrl.538986eb.js.map"}