{"mappings":"0tCAGaA,IAHb,IAAMC,EAAAC,EAAA,gDACAA,EAAA,wBAEOF,qBAGDG,2BAA0B,OAIzBH,EAAkBI,wBAAsBC,KAAOC,2BAC/CC,QAAUC,SAASC,cAAa,eAChCF,QAAQG,UAASC,EAAAC,aACjBL,QAAQM,cAAa,sBAAuBC,iBAAgB,QAAQT,KAAOU,KAAKC,KAAIX,YAEpFE,QAAQM,cAAa,UAA4BC,iBAAgB,SAAST,KAAOY,aAAaD,KAAIX,OAGnGa,sBACJlB,EAAkBI,uBAAyB,IAAIe,SAASC,IACpD,MAAMC,EAASb,SAASC,cAAa,UACrCY,EAAOC,OAAM,KACT,MAAMC,EAAYf,SAASC,cAAa,OACxCc,EAAUC,UAAS,qBACnBhB,SAASiB,KAAKC,YAAYH,GACzBI,OAAeC,WAAWC,OAAK,KAC3BF,OAAeC,WAAWE,OAAOP,EAAS,CACvCQ,QAAO,2CACPC,KAAI,YACJC,SAAWC,GAAK7B,KAAUF,2BAA2B+B,KAEzDd,QAGRC,EAAOc,IAAG,0DACVd,EAAOe,OAAQ,EACff,EAAOgB,OAAQ,EAEf7B,SAASiB,KAAKC,YAAYL,gCAK/B,MAAMa,QAAc,IAAIf,SAAiBC,SAC/BjB,2BAA6BiB,EAClCO,OAAeC,WAAWU,oBAE7BX,OAAeC,WAAWW,QAEpBL,wBAGoBM,EAAcC,EAAU,UAC5C,IAAItB,SAAOkB,MAAQjB,EAASsB,KAC/B,MAAMC,EAAG,mGAAwGH,EAE3GN,QAAK7B,KAAcuC,oBACnBC,EAAM,IAAIC,eAChBD,EAAIE,KAAI,OAASJ,EAAG,UAAeK,mBAAmBd,IACtDW,EAAII,iBAAgB,eAAe,qCACnCJ,EAAIK,mBAAkB,KAClB,GAAsB,IAAnBL,EAAIM,YAAmC,MAAfN,EAAIO,OAAgB,CAE3C,GAAc,YADFC,KAAKC,MAAMT,EAAIU,cACnBC,OAAoB,OAASpC,MAC1BqB,EAAU,EAAGrB,EAAOf,KAAMoD,gBAAgBjB,EAAMC,IACtDC,MAGbG,EAAIa,UAIZxC,gBAC2C,cAA3BX,QAAQoD,aAAY,QAGpCzC,YACSX,QAAQqD,aAAY,OAAO,QAGpC1C,YACSX,QAAQsD,gBAAe,2BAGZC,SACV9D,EAAkBI,uBAExB,MAAM2D,EAAOD,EAAEE,cACTC,EAASF,EAAKlD,cAAa,UACjCoD,EAAOC,UAAW,EAClBJ,EAAEK,iBAEF,MAAMxB,EAAMyB,MAAMC,UAAUC,MAAMC,MAAMR,EAAKS,iBAAgB,mBACpDC,KACIC,GACD1B,mBAAmB0B,EAAGC,MAAI,IAAU3B,mBAAmB0B,EAAGE,SAE7DC,KAAI,gBAEFpB,gBAAgBd,GAAKmC,MAAI,KAE5Bb,EAAOc,YAAW,OAClBd,EAAOe,UAAUC,OAAM,QACvBhB,EAAOe,UAAUE,IAAG,WACvB,SAGLjB,EAAOC,UAAW,oJC3G1BiB,EAAOC,QAAO","sources":["src/contactDialog/index.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-f69e9ba31a9c8db9.js"],"sourcesContent":["import tpl from 'bundle-text:./tpl.html';\nimport './_styles.scss';\n\nexport class ContactDialogCtrl {\n    static grecaptchaScriptLoader: Promise<HTMLElement>;\n\n    private grecaptchaCallbackResolver: (token: string)=> void = () => {};\n    element: HTMLDialogElement;\n\n    constructor () {\n        if (!ContactDialogCtrl.grecaptchaScriptLoader) this.createScriptElement();\n        this.element = document.createElement('dialog');\n        this.element.innerHTML = tpl;\n        this.element.querySelector('.dialog__btn-close').addEventListener('click', this.hide.bind(this));\n\n        this.element.querySelector<HTMLFormElement>('.gform').addEventListener('submit', this.onFormSubmit.bind(this))\n    }\n    \n    private createScriptElement () {\n        ContactDialogCtrl.grecaptchaScriptLoader = new Promise((resolve) => {\n            const script = document.createElement('script');\n            script.onload = () => {\n                const container = document.createElement('div');\n                container.className = 'grecaptcha-wrapper';\n                document.body.appendChild(container);\n                (window as any).grecaptcha.ready(() => {\n                    (window as any).grecaptcha.render(container, {\n                        sitekey: '6LdQaM8ZAAAAAJwBCtGEYIyh9u6be1rBOlsd-FWj',\n                        size: 'invisible',\n                        callback: (token) => this.grecaptchaCallbackResolver(token)\n                    });\n                    resolve();\n                });\n            };\n            script.src = 'https://www.google.com/recaptcha/api.js?render=explicit';\n            script.defer = true;\n            script.async = true;\n\n            document.body.appendChild(script);\n        });\n    }\n\n    private async executeGrecaptcha () {\n       const token = await new Promise<string>((resolve) => {\n            this.grecaptchaCallbackResolver = resolve;\n           (window as any).grecaptcha.execute();\n        });\n        (window as any).grecaptcha.reset();\n\n        return token;\n    }\n\n    private async sendContactData (data: string, attempt = 0) {\n        return new Promise(async (resolve, reject) => {\n            const url = 'https://script.google.com/macros/s/AKfycbzrISB5QwRuuwGTgkxgKp7DGENDHPcxZTcka2_LRQ0zULSf5Ec/exec?' + data;\n\n            const token = await this.executeGrecaptcha();\n            const req = new XMLHttpRequest();\n            req.open('POST', url + '&token=' + encodeURIComponent(token));\n            req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n            req.onreadystatechange = () => {\n                if(req.readyState === 4 && req.status === 200) {\n                    const res = JSON.parse(req.responseText);\n                    if (res.result === 'success') return resolve();\n                    else if (++attempt < 3) resolve(this.sendContactData(data, attempt))\n                    else reject();\n                }\n            }\n            req.send();\n        });\n    }\n\n    isShown () {\n        return this.element.getAttribute('open') === 'open';\n    }\n\n    show() {\n        this.element.setAttribute('open', 'open');\n    }\n\n    hide() {\n        this.element.removeAttribute('open');\n    }\n\n    async onFormSubmit (e: Event) {\n        await ContactDialogCtrl.grecaptchaScriptLoader;\n\n        const form = e.currentTarget as HTMLFormElement;\n        const button = form.querySelector('button');\n        button.disabled = true;\n        e.preventDefault();\n\n        const url = Array.prototype.slice.apply(form.querySelectorAll('input,textarea'))\n                .map(\n                    (el: HTMLInputElement | HTMLTextAreaElement) =>\n                    encodeURIComponent(el.name) + '=' + encodeURIComponent(el.value)\n                )\n                .join('&');\n\n        await this.sendContactData(url).then(\n            () => {\n                button.textContent = 'THX!';\n                button.classList.remove('fill');\n                button.classList.add('pe-n');\n            },\n            () => {}\n        );\n        button.disabled = false;\n    }\n}\n","module.exports = \"30d90cbeb63ec87b\";"],"names":["ContactDialogCtrl","_tplHtml","require","grecaptchaCallbackResolver","grecaptchaScriptLoader","this","createScriptElement","element","document","createElement","innerHTML","_tplHtmlDefault","default","querySelector","addEventListener","hide","bind","onFormSubmit","[object Object]","Promise","resolve","script","onload","container","className","body","appendChild","window","grecaptcha","ready","render","sitekey","size","callback","token","src","defer","async","execute","reset","data","attempt","reject","url","executeGrecaptcha","req","XMLHttpRequest","open","encodeURIComponent","setRequestHeader","onreadystatechange","readyState","status","JSON","parse","responseText","result","sendContactData","send","getAttribute","setAttribute","removeAttribute","e","form","currentTarget","button","disabled","preventDefault","Array","prototype","slice","apply","querySelectorAll","map","el","name","value","join","then","textContent","classList","remove","add","module","exports"],"version":3,"file":"contactDialog.12590b0b.js.map"}