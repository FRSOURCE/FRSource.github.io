{"mappings":"qvCAAgB,kDACT,kBAEA,MAAAA,EAGKC,2BAAqD,OAG7DC,cACSF,EAAkBG,wBAAwBC,KAAKC,sBACpDD,KAAKE,QAAUC,SAASC,cAAc,UACtCJ,KAAKE,QAAQG,UAAAA,EAAAA,QACbL,KAAKE,QAAQI,cAAc,sBAAsBC,iBAAiB,QAASP,KAAKQ,KAAKC,KAAKT,OAE1FA,KAAKE,QAAQI,cAA+B,UAAUC,iBAAiB,SAAUP,KAAKU,aAAaD,KAAKT,OAGpGC,sBACJL,EAAkBG,uBAAAA,IAA6BY,SAASC,UAC9CC,EAASV,SAASC,cAAc,UACtCS,EAAOC,OAAS,WACNC,EAAYZ,SAASC,cAAc,OACzCW,EAAUC,UAAY,qBACtBb,SAASc,KAAKC,YAAYH,GACzBI,OAAeC,WAAWC,OAAM,KAC5BF,OAAeC,WAAWE,OAAOP,EAAAA,CAC9BQ,QAAS,2CACTC,KAAM,YACNC,SAAWC,GAAU1B,KAAKH,2BAA2B6B,KAEzDd,QAGRC,EAAOc,IAAM,0DACbd,EAAOe,OAAQ,EACff,EAAOgB,OAAQ,EAEf1B,SAASc,KAAKC,YAAYL,sCAKzBa,QAAQ,IAAUf,SAAiBC,IACpCZ,KAAKH,2BAA6Be,EAClCO,OAAeC,WAAWU,oBAE7BX,OAAeC,WAAWW,QAEpBL,wBAGoBM,EAAcC,EAAU,cACxCtB,SAAQkB,MAAOjB,EAASsB,WACzBC,EAAM,mGAAqGH,EAE3GN,QAAc1B,KAAKoC,oBACnBC,EAAAA,IAAUC,eAChBD,EAAIE,KAAK,OAAQJ,EAAM,UAAYK,mBAAmBd,IACtDW,EAAII,iBAAiB,eAAgB,qCACrCJ,EAAIK,mBAAqB,QACC,IAAnBL,EAAIM,YAAmC,MAAfN,EAAIO,OAAW,IAEnB,YADPC,KAAKC,MAAMT,EAAIU,cACnBC,OAAW,OAAkBpC,MAC1BqB,EAAU,EAAGrB,EAAQZ,KAAKiD,gBAAgBjB,EAAMC,IACtDC,MAGbG,EAAIa,UAIZC,gBACiD,SAAtCnD,KAAKE,QAAQkD,aAAa,QAGrCC,OACIrD,KAAKE,QAAQoD,aAAa,OAAQ,QAGtC9C,OACIR,KAAKE,QAAQqD,gBAAgB,2BAGbC,SACV5D,EAAkBG,6BAElB0D,EAAOD,EAAEE,cACTC,EAASF,EAAKnD,cAAc,UAClCqD,EAAOC,UAAW,EAClBJ,EAAEK,uBAEI1B,EAAM2B,MAAMC,UAAUC,MAAMC,MAAMR,EAAKS,iBAAiB,mBACrDC,KACIC,GACD5B,mBAAmB4B,EAAGC,MAAQ,IAAM7B,mBAAmB4B,EAAGE,SAE7DC,KAAK,WAERvE,KAAKiD,gBAAgBd,GAAKqC,MAC5B,KACIb,EAAOc,YAAc,OACrBd,EAAOe,UAAUC,OAAO,QACxBhB,EAAOe,UAAUE,IAAI,WAEzB,SAEJjB,EAAOC,UAAW","sources":["./src/contactDialog/index.ts"],"sourcesContent":["import tpl from 'bundle-text:./tpl.html';\nimport './_styles.scss';\n\nexport class ContactDialogCtrl {\n    static grecaptchaScriptLoader: Promise<HTMLElement>;\n\n    private grecaptchaCallbackResolver: (token: string)=> void = () => {};\n    element: HTMLDialogElement;\n\n    constructor () {\n        if (!ContactDialogCtrl.grecaptchaScriptLoader) this.createScriptElement();\n        this.element = document.createElement('dialog');\n        this.element.innerHTML = tpl;\n        this.element.querySelector('.dialog__btn-close').addEventListener('click', this.hide.bind(this));\n\n        this.element.querySelector<HTMLFormElement>('.gform').addEventListener('submit', this.onFormSubmit.bind(this))\n    }\n    \n    private createScriptElement () {\n        ContactDialogCtrl.grecaptchaScriptLoader = new Promise((resolve) => {\n            const script = document.createElement('script');\n            script.onload = () => {\n                const container = document.createElement('div');\n                container.className = 'grecaptcha-wrapper';\n                document.body.appendChild(container);\n                (window as any).grecaptcha.ready(() => {\n                    (window as any).grecaptcha.render(container, {\n                        sitekey: '6LdQaM8ZAAAAAJwBCtGEYIyh9u6be1rBOlsd-FWj',\n                        size: 'invisible',\n                        callback: (token) => this.grecaptchaCallbackResolver(token)\n                    });\n                    resolve();\n                });\n            };\n            script.src = 'https://www.google.com/recaptcha/api.js?render=explicit';\n            script.defer = true;\n            script.async = true;\n\n            document.body.appendChild(script);\n        });\n    }\n\n    private async executeGrecaptcha () {\n       const token = await new Promise<string>((resolve) => {\n            this.grecaptchaCallbackResolver = resolve;\n           (window as any).grecaptcha.execute();\n        });\n        (window as any).grecaptcha.reset();\n\n        return token;\n    }\n\n    private async sendContactData (data: string, attempt = 0) {\n        return new Promise(async (resolve, reject) => {\n            const url = 'https://script.google.com/macros/s/AKfycbzrISB5QwRuuwGTgkxgKp7DGENDHPcxZTcka2_LRQ0zULSf5Ec/exec?' + data;\n\n            const token = await this.executeGrecaptcha();\n            const req = new XMLHttpRequest();\n            req.open('POST', url + '&token=' + encodeURIComponent(token));\n            req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n            req.onreadystatechange = () => {\n                if(req.readyState === 4 && req.status === 200) {\n                    const res = JSON.parse(req.responseText);\n                    if (res.result === 'success') return resolve();\n                    else if (++attempt < 3) resolve(this.sendContactData(data, attempt))\n                    else reject();\n                }\n            }\n            req.send();\n        });\n    }\n\n    isShown () {\n        return this.element.getAttribute('open') === 'open';\n    }\n\n    show() {\n        this.element.setAttribute('open', 'open');\n    }\n\n    hide() {\n        this.element.removeAttribute('open');\n    }\n\n    async onFormSubmit (e: Event) {\n        await ContactDialogCtrl.grecaptchaScriptLoader;\n\n        const form = e.currentTarget as HTMLFormElement;\n        const button = form.querySelector('button');\n        button.disabled = true;\n        e.preventDefault();\n\n        const url = Array.prototype.slice.apply(form.querySelectorAll('input,textarea'))\n                .map(\n                    (el: HTMLInputElement | HTMLTextAreaElement) =>\n                    encodeURIComponent(el.name) + '=' + encodeURIComponent(el.value)\n                )\n                .join('&');\n\n        await this.sendContactData(url).then(\n            () => {\n                button.textContent = 'THX!';\n                button.classList.remove('fill');\n                button.classList.add('pe-n');\n            },\n            () => {}\n        );\n        button.disabled = false;\n    }\n}\n"],"names":["ContactDialogCtrl","grecaptchaCallbackResolver","constructor","grecaptchaScriptLoader","this","createScriptElement","element","document","createElement","innerHTML","querySelector","addEventListener","hide","bind","onFormSubmit","Promise","resolve","script","onload","container","className","body","appendChild","window","grecaptcha","ready","render","sitekey","size","callback","token","src","defer","async","execute","reset","data","attempt","reject","url","executeGrecaptcha","req","XMLHttpRequest","open","encodeURIComponent","setRequestHeader","onreadystatechange","readyState","status","JSON","parse","responseText","result","sendContactData","send","isShown","getAttribute","show","setAttribute","removeAttribute","e","form","currentTarget","button","disabled","preventDefault","Array","prototype","slice","apply","querySelectorAll","map","el","name","value","join","then","textContent","classList","remove","add"],"version":3,"file":"contactDialog.249e09e3.js.map"}