{"mappings":"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","sources":["./node_modules/@parcel/runtime-js/lib/JSRuntime.js","./node_modules/@parcel/runtime-js/lib/bundle-manifest.js","./src/index.ts","./node_modules/@parcel/runtime-js/lib/loaders/browser/js-loader.js","./node_modules/@parcel/runtime-js/lib/cacheLoader.js","./node_modules/@parcel/runtime-js/lib/bundle-url.js","./node_modules/@parcel/runtime-js/lib/relative-path.js","./node_modules/@parcel/runtime-js/lib/loaders/browser/css-loader.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _plugin() {\n  const data = require(\"@parcel/plugin\");\n\n  _plugin = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _utils() {\n  const data = require(\"@parcel/utils\");\n\n  _utils = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _nullthrows() {\n  const data = _interopRequireDefault(require(\"nullthrows\"));\n\n  _nullthrows = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of browsers that support dynamic import natively\n// https://caniuse.com/#feat=es6-module-dynamic-import\nconst DYNAMIC_IMPORT_BROWSERS = {\n  edge: '76',\n  firefox: '67',\n  chrome: '63',\n  safari: '11.1',\n  opera: '50'\n}; // Used for as=\"\" in preload/prefetch\n\nconst TYPE_TO_RESOURCE_PRIORITY = {\n  css: 'style',\n  js: 'script'\n};\nconst BROWSER_PRELOAD_LOADER = './loaders/browser/preload-loader';\nconst BROWSER_PREFETCH_LOADER = './loaders/browser/prefetch-loader';\nconst LOADERS = {\n  browser: {\n    css: './loaders/browser/css-loader',\n    html: './loaders/browser/html-loader',\n    js: './loaders/browser/js-loader',\n    wasm: './loaders/browser/wasm-loader',\n    IMPORT_POLYFILL: './loaders/browser/import-polyfill'\n  },\n  worker: {\n    js: './loaders/worker/js-loader',\n    wasm: './loaders/worker/wasm-loader',\n    IMPORT_POLYFILL: false\n  },\n  node: {\n    css: './loaders/node/css-loader',\n    html: './loaders/node/html-loader',\n    js: './loaders/node/js-loader',\n    wasm: './loaders/node/wasm-loader',\n    IMPORT_POLYFILL: null\n  }\n};\n\nfunction getLoaders(ctx) {\n  if (ctx.isWorker()) return LOADERS.worker;\n  if (ctx.isBrowser()) return LOADERS.browser;\n  if (ctx.isNode()) return LOADERS.node;\n  return null;\n}\n\nvar _default = new (_plugin().Runtime)({\n  apply({\n    bundle,\n    bundleGraph,\n    options\n  }) {\n    // Dependency ids in code replaced with referenced bundle names\n    // Loader runtime added for bundle groups that don't have a native loader (e.g. HTML/CSS/Worker - isURL?),\n    // and which are not loaded by a parent bundle.\n    // Loaders also added for modules that were moved to a separate bundle because they are a different type\n    // (e.g. WASM, HTML). These should be preloaded prior to the bundle being executed. Replace the entry asset(s)\n    // with the preload module.\n    if (bundle.type !== 'js') {\n      return;\n    }\n\n    let asyncDependencies = [];\n    let otherDependencies = [];\n    bundle.traverse(node => {\n      if (node.type !== 'dependency') {\n        return;\n      }\n\n      let dependency = node.value;\n\n      if (dependency.isAsync && !dependency.isURL) {\n        asyncDependencies.push(dependency);\n      } else {\n        otherDependencies.push(dependency);\n      }\n    });\n    let assets = [];\n\n    for (let dependency of asyncDependencies) {\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (resolved == null) {\n        continue;\n      }\n\n      if (resolved.type === 'asset') {\n        // If this bundle already has the asset this dependency references,\n        // return a simple runtime of `Promise.resolve(require(\"path/to/asset\"))`.\n        assets.push({\n          filePath: _path().default.join(options.projectRoot, 'JSRuntime.js'),\n          // Using Promise['resolve'] to prevent Parcel from inferring this is an async dependency.\n          // TODO: Find a better way of doing this.\n          code: `module.exports = Promise['resolve'](require(${JSON.stringify('./' + _path().default.relative(options.projectRoot, resolved.value.filePath))}))`,\n          dependency\n        });\n      } else {\n        let loaderRuntime = getLoaderRuntime({\n          bundle,\n          dependency,\n          bundleGraph,\n          bundleGroup: resolved.value\n        });\n\n        if (loaderRuntime != null) {\n          assets.push(loaderRuntime);\n        }\n      }\n    }\n\n    for (let dependency of otherDependencies) {\n      // Resolve the dependency to a bundle. If inline, export the dependency id,\n      // which will be replaced with the contents of that bundle later.\n      let referencedBundle = bundleGraph.getReferencedBundle(dependency, bundle);\n\n      if (referencedBundle === null || referencedBundle === void 0 ? void 0 : referencedBundle.isInline) {\n        assets.push({\n          filePath: _path().default.join(__dirname, `/bundles/${referencedBundle.id}.js`),\n          code: `module.exports = ${JSON.stringify(dependency.id)};`,\n          dependency\n        });\n        continue;\n      } // Otherwise, try to resolve the dependency to an external bundle group\n      // and insert a URL to that bundle.\n\n\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (dependency.isURL && resolved == null) {\n        // If a URL dependency was not able to be resolved, add a runtime that\n        // exports the original moduleSpecifier.\n        assets.push({\n          filePath: __filename,\n          code: `module.exports = ${JSON.stringify(dependency.moduleSpecifier)}`,\n          dependency\n        });\n        continue;\n      }\n\n      if (resolved == null || resolved.type !== 'bundle_group') {\n        continue;\n      }\n\n      let bundleGroup = resolved.value;\n      let mainBundle = (0, _nullthrows().default)(bundleGraph.getBundlesInBundleGroup(bundleGroup).find(b => {\n        let entries = b.getEntryAssets();\n        return entries.some(e => bundleGroup.entryAssetId === e.id);\n      }));\n\n      if (bundle.env.outputFormat === 'commonjs' && mainBundle.type === 'js') {\n        assets.push({\n          filePath: __filename,\n          dependency,\n          code: `module.exports = require(\"./\" + ${getRelativePathExpr(bundle, mainBundle)})`\n        });\n        continue;\n      } // URL dependency or not, fall back to including a runtime that exports the url\n\n\n      assets.push(getURLRuntime(dependency, bundle, mainBundle));\n    }\n\n    if (shouldUseRuntimeManifest(bundle) && bundleGraph.getChildBundles(bundle).length > 0 && isNewContext(bundle, bundleGraph)) {\n      assets.push({\n        filePath: __filename,\n        code: getRegisterCode(bundle, bundleGraph),\n        isEntry: true\n      });\n    }\n\n    return assets;\n  }\n\n});\n\nexports.default = _default;\n\nfunction getLoaderRuntime({\n  bundle,\n  dependency,\n  bundleGroup,\n  bundleGraph\n}) {\n  let loaders = getLoaders(bundle.env);\n\n  if (loaders == null) {\n    return;\n  } // Sort so the bundles containing the entry asset appear last\n\n\n  let externalBundles = bundleGraph.getBundlesInBundleGroup(bundleGroup).filter(bundle => !bundle.isInline).sort(bundle => bundle.getEntryAssets().map(asset => asset.id).includes(bundleGroup.entryAssetId) ? 1 : -1); // CommonJS is a synchronous module system, so there is no need to load bundles in parallel.\n  // Importing of the other bundles will be handled by the bundle group entry.\n  // Do the same thing in library mode for ES modules, as we are building for another bundler\n  // and the imports for sibling bundles will be in the target bundle.\n\n  if (bundle.env.outputFormat === 'commonjs' || bundle.env.isLibrary) {\n    externalBundles = externalBundles.slice(-1);\n  } // Determine if we need to add a dynamic import() polyfill, or if all target browsers support it natively.\n\n\n  let needsDynamicImportPolyfill = false;\n\n  if (bundle.env.isBrowser() && bundle.env.outputFormat === 'esmodule') {\n    needsDynamicImportPolyfill = !bundle.env.matchesEngines(DYNAMIC_IMPORT_BROWSERS);\n  }\n\n  let loaderModules = externalBundles.map(to => {\n    let loader = loaders[to.type];\n\n    if (!loader) {\n      return;\n    }\n\n    let relativePathExpr = getRelativePathExpr(bundle, to); // Use esmodule loader if possible\n\n    if (to.type === 'js' && to.env.outputFormat === 'esmodule') {\n      if (!needsDynamicImportPolyfill) {\n        return `import(\"./\" + ${relativePathExpr})`;\n      }\n\n      loader = (0, _nullthrows().default)(loaders.IMPORT_POLYFILL, `No import() polyfill available for context '${bundle.env.context}'`);\n    } else if (to.type === 'js' && to.env.outputFormat === 'commonjs') {\n      return `Promise.resolve(require(\"./\" + ${relativePathExpr}))`;\n    }\n\n    return `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`;\n  }).filter(Boolean);\n\n  if (bundle.env.context === 'browser') {\n    loaderModules.push(...(0, _utils().flatMap)( // TODO: Allow css to preload resources as well\n    externalBundles.filter(to => to.type === 'js'), from => {\n      let {\n        preload,\n        prefetch\n      } = getHintedBundleGroups(bundleGraph, from);\n      return [...getHintLoaders(bundleGraph, bundle, preload, BROWSER_PRELOAD_LOADER), ...getHintLoaders(bundleGraph, bundle, prefetch, BROWSER_PREFETCH_LOADER)];\n    }));\n  }\n\n  if (loaderModules.length === 0) {\n    return;\n  }\n\n  let loaderCode = loaderModules.join(', ');\n\n  if (loaderModules.length > 1 && (bundle.env.outputFormat === 'global' || !externalBundles.every(b => b.type === 'js'))) {\n    loaderCode = `Promise.all([${loaderCode}])`;\n\n    if (bundle.env.outputFormat !== 'global') {\n      loaderCode += `.then(r => r[r.length - 1])`;\n    }\n  } else {\n    loaderCode = `(${loaderCode})`;\n  }\n\n  if (bundle.env.outputFormat === 'global') {\n    loaderCode += `.then(() => parcelRequire('${bundleGraph.getAssetPublicId(bundleGraph.getAssetById(bundleGroup.entryAssetId))}')${// In global output with scope hoisting, functions return exports are\n    // always returned. Otherwise, the exports are returned.\n    bundle.env.scopeHoist ? '()' : ''})`;\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = ${loaderCode};`,\n    dependency\n  };\n}\n\nfunction getHintedBundleGroups(bundleGraph, bundle) {\n  let preload = [];\n  let prefetch = [];\n  bundle.traverse(node => {\n    var _dependency$meta;\n\n    if (node.type !== 'dependency') {\n      return;\n    }\n\n    let dependency = node.value; // $FlowFixMe\n\n    let attributes = (_dependency$meta = dependency.meta) === null || _dependency$meta === void 0 ? void 0 : _dependency$meta.importAttributes;\n\n    if (dependency.isAsync && !dependency.isURL && typeof attributes === 'object' && attributes != null && ( // $FlowFixMe\n    attributes.preload || attributes.prefetch)) {\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if ((resolved === null || resolved === void 0 ? void 0 : resolved.type) === 'bundle_group') {\n        // === true for flow\n        if (attributes.preload === true) {\n          preload.push(resolved.value);\n        }\n\n        if (attributes.prefetch === true) {\n          prefetch.push(resolved.value);\n        }\n      }\n    }\n  });\n  return {\n    preload,\n    prefetch\n  };\n}\n\nfunction getHintLoaders(bundleGraph, from, bundleGroups, loader) {\n  let hintLoaders = [];\n\n  for (let bundleGroupToPreload of bundleGroups) {\n    let bundlesToPreload = bundleGraph.getBundlesInBundleGroup(bundleGroupToPreload);\n\n    for (let bundleToPreload of bundlesToPreload) {\n      let relativePathExpr = getRelativePathExpr(from, bundleToPreload);\n      let priority = TYPE_TO_RESOURCE_PRIORITY[bundleToPreload.type];\n      hintLoaders.push(`require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr}, ${priority ? JSON.stringify(priority) : 'null'}, ${JSON.stringify(bundleToPreload.target.env.outputFormat === 'esmodule')})`);\n    }\n  }\n\n  return hintLoaders;\n}\n\nfunction isNewContext(bundle, bundleGraph) {\n  let parents = bundleGraph.getParentBundles(bundle);\n  return bundle.isEntry || parents.length === 0 || parents.some(parent => parent.env.context !== bundle.env.context || parent.type !== 'js');\n}\n\nfunction getURLRuntime(dependency, from, to) {\n  let relativePathExpr = getRelativePathExpr(from, to);\n\n  if (dependency.meta.webworker === true) {\n    return {\n      filePath: __filename,\n      code: `module.exports = require('./get-worker-url')(${relativePathExpr});`,\n      dependency\n    };\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = require('./bundle-url').getBundleURL() + ${relativePathExpr}`,\n    dependency\n  };\n}\n\nfunction getRegisterCode(entryBundle, bundleGraph) {\n  let idToName = {};\n  bundleGraph.traverseBundles((bundle, _, actions) => {\n    if (bundle.isInline) {\n      return;\n    }\n\n    idToName[bundle.publicId] = (0, _nullthrows().default)(bundle.name);\n\n    if (bundle !== entryBundle && isNewContext(bundle, bundleGraph)) {\n      // New contexts have their own manifests, so there's no need to continue.\n      actions.skipChildren();\n    }\n  }, entryBundle);\n  return \"require('./bundle-manifest').register(JSON.parse(\" + JSON.stringify(JSON.stringify(idToName)) + '));';\n}\n\nfunction getRelativePathExpr(from, to) {\n  if (shouldUseRuntimeManifest(from)) {\n    return `require('./relative-path')(${JSON.stringify(from.publicId)}, ${JSON.stringify(to.publicId)})`;\n  }\n\n  return JSON.stringify((0, _utils().relativeBundlePath)(from, to, {\n    leadingDotSlash: false\n  }));\n}\n\nfunction shouldUseRuntimeManifest(bundle) {\n  let env = bundle.env;\n  return !env.isLibrary && env.outputFormat === 'global' && env.isBrowser();\n}","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","import type ResizeObserverType from 'resize-observer-polyfill';\nimport './index.scss';\nimport type { ContactDialogCtrl } from './contactDialog.ctrl';\n\ndeclare global {\n    interface Window {\n        ResizeObserver: typeof ResizeObserverType;\n    }\n}\n\n(async () => {\n    if (!window.ResizeObserver) {\n        const {default: ResizeObserver} = await import('resize-observer-polyfill');\n        window.ResizeObserver = ResizeObserver;\n    }\n\n    if (!matchMedia('(prefers-reduced-motion: reduce)').matches) {\n        const loadEls = document.body.querySelectorAll('.load-fadeinup');\n\n        import('domready').then((domready) => (domready as unknown as typeof domready['default'])(() => {\n            setTimeout(() => \n                loadEls.forEach((el, i) => {\n                    setTimeout(() =>  el.classList.add('in'), 300 * i);\n                }),\n                5500\n            );\n        }));\n\n        import('./logo.ctrl').then(({LogoCtrl}) => {\n            const logo = document.querySelector<SVGSVGElement>('.icon-logomark');\n            const logoWrapper = logo.parentElement;\n            const logoText = logo.querySelector<SVGSVGElement>('use');\n            const paths = Array.from(logo.querySelectorAll<HTMLElement | SVGElement>('path'));\n            const canvas = document.createElement('canvas');\n            canvas.className = 'icon-logomark icon-logomark--canvas';\n            logoWrapper.appendChild(canvas);\n\n            paths.push(logoText);\n            paths.forEach(path => path.style.visibility = 'hidden');\n            logoWrapper.style.display = 'flex';\n            \n            new LogoCtrl(\n                logo,\n                canvas,\n                paths\n            ).init();\n        });\n    }\n\n    let contactDialogCtrl: ContactDialogCtrl; \n\n    document.body.querySelector('button').addEventListener('click', async () => {\n        if (!contactDialogCtrl) {\n            const {ContactDialogCtrl} = await import('./contactDialog.ctrl');\n            contactDialogCtrl = new ContactDialogCtrl();\n            document.body.querySelector('.content').insertAdjacentElement('afterbegin', contactDialogCtrl.element);\n        }\n\n        contactDialogCtrl.isShown\n            ? contactDialogCtrl.show()\n            : contactDialogCtrl.hide();\n    });\n})();\n","const cacheLoader = require('../../cacheLoader');\n\nmodule.exports = cacheLoader(function loadJSBundle(bundle) {\n  return new Promise(function(resolve, reject) {\n    var script = document.createElement('script');\n    script.async = true;\n    script.type = 'text/javascript';\n    script.charset = 'utf-8';\n    script.src = bundle;\n    script.onerror = function(e) {\n      script.onerror = script.onload = null;\n      reject(e);\n    };\n\n    script.onload = function() {\n      script.onerror = script.onload = null;\n      resolve();\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n});\n","\"use strict\";\n\nlet cachedBundles = {};\nlet cachedPreloads = {};\nlet cachedPrefetches = {};\n\nfunction getCache(type) {\n  switch (type) {\n    case 'preload':\n      return cachedPreloads;\n\n    case 'prefetch':\n      return cachedPrefetches;\n\n    default:\n      return cachedBundles;\n  }\n}\n\nmodule.exports = function (loader, type) {\n  return function (bundle) {\n    let cache = getCache(type);\n\n    if (cache[bundle]) {\n      return cache[bundle];\n    }\n\n    return cache[bundle] = loader.apply(null, arguments).catch(function (e) {\n      delete cache[bundle];\n      throw e;\n    });\n  };\n};","\"use strict\";\n\n/* globals document:readonly */\nvar bundleURL = null;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  let matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nvar resolve = require('./bundle-manifest').resolve;\n\nmodule.exports = function (fromId, toId) {\n  return relative(dirname(resolve(fromId)), resolve(toId));\n};\n\nfunction dirname(_filePath) {\n  if (_filePath === '') {\n    return '.';\n  }\n\n  var filePath = _filePath[_filePath.length - 1] === '/' ? _filePath.slice(0, _filePath.length - 1) : _filePath;\n  var slashIndex = filePath.lastIndexOf('/');\n  return slashIndex === -1 ? '.' : filePath.slice(0, slashIndex);\n}\n\nfunction relative(from, to) {\n  if (from === to) {\n    return '';\n  }\n\n  var fromParts = from.split('/');\n\n  if (fromParts[0] === '.') {\n    fromParts.shift();\n  }\n\n  var toParts = to.split('/');\n\n  if (toParts[0] === '.') {\n    toParts.shift();\n  } // Find where path segments diverge.\n\n\n  var i;\n  var divergeIndex;\n\n  for (i = 0; (i < toParts.length || i < fromParts.length) && divergeIndex == null; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      divergeIndex = i;\n    }\n  } // If there are segments from \"from\" beyond the point of divergence,\n  // return back up the path to that point using \"..\".\n\n\n  var parts = [];\n\n  for (i = 0; i < fromParts.length - divergeIndex; i++) {\n    parts.push('..');\n  } // If there are segments from \"to\" beyond the point of divergence,\n  // continue using the remaining segments.\n\n\n  if (toParts.length > divergeIndex) {\n    parts.push.apply(parts, toParts.slice(divergeIndex));\n  }\n\n  return parts.join('/');\n}\n\nmodule.exports._dirname = dirname;\nmodule.exports._relative = relative;","const cacheLoader = require('../../cacheLoader');\n\nmodule.exports = cacheLoader(function loadCSSBundle(bundle) {\n  return new Promise(function(resolve, reject) {\n    var link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = bundle;\n    link.onerror = function(e) {\n      link.onerror = link.onload = null;\n      reject(e);\n    };\n\n    link.onload = function() {\n      link.onerror = link.onload = null;\n      resolve();\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(link);\n  });\n});\n"],"names":["require","register","JSON","parse","mapping","module","exports","pairs","keys","Object","i","length","id","resolved","Error","_asyncToGenerator","regeneratorRuntime","mark","_callee2","_yield$import","ResizeObserver","loadEls","contactDialogCtrl","wrap","_context2","prev","next","window","sent","default","matchMedia","matches","document","body","querySelectorAll","then","domready","setTimeout","forEach","el","classList","add","_ref2","LogoCtrl","logo","querySelector","logoWrapper","parentElement","logoText","paths","Array","from","canvas","createElement","className","appendChild","push","path","style","visibility","display","init","addEventListener","_callee","_yield$import2","_ContactDialogCtrl","_context","ContactDialogCtrl","insertAdjacentElement","element","isShown","show","hide","stop","getBundleURL","parcelRequire","cacheLoader","bundle","Promise","resolve","reject","script","async","type","charset","src","onerror","e","onload","getElementsByTagName","cachedBundles","cachedPreloads","cachedPrefetches","getCache","loader","cache","apply","arguments","catch","bundleURL","getBaseURL","url","replace","err","stack","match","dirname","_filePath","filePath","slice","slashIndex","lastIndexOf","relative","to","fromParts","split","shift","divergeIndex","toParts","parts","join","fromId","toId","_dirname","all","link","rel","href"],"version":3,"file":"index.9afe7d3b.js.map"}