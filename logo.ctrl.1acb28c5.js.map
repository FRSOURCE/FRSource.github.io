{"mappings":"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","sources":["./src/logo.ctrl.ts"],"sourcesContent":["export class LogoCtrl {\n    private static maxGlitchTime = 600;\n    private static dpi = window.devicePixelRatio;\n\n    private static randInt (a: number = 0, b: number = 1) { return Math.random() * (b - a) + a; }\n    private static randIntNormalDistributed (a: number = 0, b: number = 1) {\n        let u = 0, v = 0;\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n        while(v === 0) v = Math.random();\n        const num = Math.abs(Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v )) + .1;\n        return (num > 3.8 ? 1 : (num > 1 ? num % 1 : (num > .1 && num < .4 ? num + Math.random() * .5 : (num < 0 ? 0 : num)))) * (b - a) + a;\n    }\n    private static asyncTimeout (timeout: number) {\n        return new Promise(resolve =>\n            setTimeout(resolve, timeout)\n        );\n    }\n\n    private lastVisibleItem = -1;\n\n    private resizeObserver = new window.ResizeObserver(this.onResize.bind(this));\n\n    private img: HTMLImageElement;\n    private ctx: CanvasRenderingContext2D;\n    private imgSize: {width: number; height: number};\n    private canvasSize: {width: number; height: number};\n\n    constructor (\n        public logo: SVGElement,\n        public canvas: HTMLCanvasElement,\n        public itemsToReveal: (HTMLElement | SVGElement)[],\n        public onFinish?: () => void\n    ) {\n        this.ctx = this.canvas.getContext('2d');\n        this.resizeObserver.observe(logo);\n        this.resizeObserver.observe(canvas);\n    }\n\n    private async onResize () {\n        await this.refreshSvgImage();\n        this.imgSize = this.logo.querySelector('g').getBoundingClientRect();\n        this.canvasSize = {width: this.canvas.offsetWidth, height: this.canvas.offsetHeight};\n        this.canvas.width = this.canvasSize.width * LogoCtrl.dpi;\n        this.canvas.height = this.canvasSize.height * LogoCtrl.dpi;\n        this.ctx.scale(LogoCtrl.dpi, LogoCtrl.dpi);\n    }\n\n    async init () {\n        await this.onResize();\n        \n        this.glitchTimeouted();\n        setTimeout(this.progressReveal.bind(this), 2500); // starting timeout\n    }\n\n    glitchImg () {\n        const imgWidth = this.imgSize.width * LogoCtrl.dpi;\n        const imgHeight = this.imgSize.height * LogoCtrl.dpi;\n        const canvasScale = Math.max(this.canvas.clientHeight/this.logo.clientHeight, this.canvas.clientWidth/this.logo.clientWidth);\n        if (Math.random() < .2) {\n            this.logo.style.visibility = 'hidden';\n        } else {\n            this.logo.style.visibility = null;\n            this.logo.style.transform = Math.random() < .7\n                ? `translate(${LogoCtrl.randIntNormalDistributed(-10, 10)}%, ${LogoCtrl.randIntNormalDistributed(-10, 10)}%)`\n                : 'none';\n        }\n\n        for (let i = 0; i < LogoCtrl.randInt(1, 13); ++i) {\n            const x = LogoCtrl.randIntNormalDistributed(0, 1);\n            const y = LogoCtrl.randIntNormalDistributed(0, 1);\n            const spliceWidth = LogoCtrl.randIntNormalDistributed(0, 1);\n            const spliceHeight = LogoCtrl.randIntNormalDistributed(0, 1);\n            // console.log(this.canvasSize.width, this.imgSize.width);\n\n            this.ctx.drawImage(\n                this.img,\n                x * imgWidth,\n                y * imgHeight,\n                spliceWidth * imgWidth * canvasScale,\n                spliceHeight * imgHeight * canvasScale,\n                LogoCtrl.randIntNormalDistributed(0, this.canvasSize.width - this.imgSize.width),\n                LogoCtrl.randIntNormalDistributed(0, this.canvasSize.height - this.imgSize.height),\n                // this.imgOffset.h + this.imgSize.h * y,\n                spliceWidth * this.imgSize.width,\n                spliceHeight * this.imgSize.height\n            );\n        }\n    }\n\n    async glitchTimeouted () {\n        this.logo.style.visibility = null;\n        await Promise.all(new Array(Math.round(LogoCtrl.randInt(.5, 3.4))).fill(0).map(async () => {\n            await LogoCtrl.asyncTimeout(LogoCtrl.randInt(550, 2500));\n            this.glitchImg();\n            await LogoCtrl.asyncTimeout(LogoCtrl.randInt(50, LogoCtrl.maxGlitchTime));\n        }));\n\n        this.ctx.clearRect(0, 0, this.canvasSize.width, this.canvasSize.height);\n        this.glitchTimeouted();\n    }\n\n    async progressReveal () {\n        if (this.lastVisibleItem === this.itemsToReveal.length - 1) {\n            return this.onFinish?.();\n        }\n\n        this.itemsToReveal[++this.lastVisibleItem].style.visibility = null;\n        await this.refreshSvgImage();\n        setTimeout(this.progressReveal.bind(this), LogoCtrl.randInt(200, 700));\n    }\n\n    async refreshSvgImage () {\n        const image = new Image();\n        const img = await new Promise<typeof image>(resolve => {\n            image.onload = resolve.bind(void 0, image);\n            const svgURL = new XMLSerializer().serializeToString(this.logo);\n            image.src = 'data:image/svg+xml; charset=utf8, ' + encodeURIComponent(svgURL);\n        });\n        return this.img = img;\n    }\n}\n"],"names":["LogoCtrl","[object Object]","window","devicePixelRatio","a","b","Math","random","u","v","num","abs","sqrt","log","cos","PI","timeout","Promise","resolve","setTimeout","lastVisibleItem","resizeObserver","ResizeObserver","this","onResize","bind","constructor","logo","canvas","itemsToReveal","onFinish","ctx","getContext","observe","refreshSvgImage","imgSize","querySelector","getBoundingClientRect","canvasSize","width","offsetWidth","height","offsetHeight","dpi","scale","glitchTimeouted","progressReveal","glitchImg","imgWidth","imgHeight","canvasScale","max","clientHeight","clientWidth","style","visibility","transform","randIntNormalDistributed","i","randInt","x","y","spliceWidth","spliceHeight","drawImage","img","all","Array","round","fill","map","async","asyncTimeout","maxGlitchTime","clearRect","length","image","Image","onload","svgURL","XMLSerializer","serializeToString","src","encodeURIComponent"],"version":3,"file":"logo.ctrl.1acb28c5.js.map"}