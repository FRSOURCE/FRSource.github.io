{"mappings":"2kCAAA,MAAAA,KAAAC,EAAA,uiBACAA,EAAA,6BAEaC,aAMT,SAAAA,iGAAeC,CAAAC,KAAAF,gHAAAG,CAAAD,KAAA,8BAH8C,eAIpDF,EAAkBI,wBAAwBF,KAAKG,sBACpDH,KAAKI,QAAUC,SAASC,cAAc,UACtCN,KAAKI,QAAQG,UAAYC,EAAAA,QACzBR,KAAKI,QAAQK,cAAc,sBAAsBC,iBAAiB,QAASV,KAAKW,KAAKC,KAAKZ,OAE1FA,KAAKI,QAAQK,cAA+B,UAAUC,iBAAiB,SAAUV,KAAKa,aAAaD,KAAKZ,kFAG7E,IAAAc,EAAAd,KAC3BF,EAAkBI,uBAAyB,IAAIa,SAAQ,SAACC,GACpD,IAAMC,EAASZ,SAASC,cAAc,UACtCW,EAAOC,OAAS,WACZ,IAAMC,EAAYd,SAASC,cAAc,OACzCa,EAAUC,UAAY,qBACtBf,SAASgB,KAAKC,YAAYH,GACzBI,OAAeC,WAAWC,OAAM,WAC5BF,OAAeC,WAAWE,OAAOP,EAAW,CACzCQ,QAAS,2CACTC,KAAM,YACNC,SAAU,SAACC,GAAD,OAAWhB,EAAKiB,2BAA2BD,MAEzDd,QAGRC,EAAOe,IAAM,0DACbf,EAAOgB,OAAQ,EACfhB,EAAOiB,OAAQ,EAEf7B,SAASgB,KAAKC,YAAYL,+LAKX,IAAIF,SAAgB,SAACC,GACpCmB,EAAKJ,2BAA6Bf,EAClCO,OAAeC,WAAWY,2BAFzBN,SAIJP,OAAeC,WAAWa,0BAEpBP,iKAGoBQ,mHAAcC,iCAAU,oBAC5C,IAAIxB,QAAJ,WAAA,IAAAyB,EAAAC,EAAAC,mBAAAC,MAAY,SAAAC,EAAO5B,EAAS6B,GAAhB,IAAAC,EAAAhB,EAAAiB,EAAA,OAAAL,mBAAAM,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACTL,EAAM,mGAAqGR,EADlGW,EAAAE,KAAA,EAGKC,EAAKC,oBAHV,KAAA,EAGTvB,EAHSmB,EAAAK,MAITP,EAAM,IAAIQ,gBACZC,KAAK,OAAQV,EAAM,UAAYW,mBAAmB3B,IACtDiB,EAAIW,iBAAiB,eAAgB,qCACrCX,EAAIY,mBAAqB,WACrB,GAAsB,IAAnBZ,EAAIa,YAAmC,MAAfb,EAAIc,OAAgB,CAE3C,GAAmB,YADPC,KAAKC,MAAMhB,EAAIiB,cACnBC,OAAsB,OAAOjD,MAC1BuB,EAAU,EAAGvB,EAAQoC,EAAKc,gBAAgB5B,EAAMC,IACtDM,MAGbE,EAAIoB,OAfW,KAAA,EAAA,IAAA,MAAA,OAAAlB,EAAAmB,UAAAxB,OAAZ,OAAA,SAAAyB,EAAAC,GAAA,OAAA9B,EAAA+B,MAAAvE,KAAAwE,YAAA,8HAoBP,MAA6C,SAAtCxE,KAAKI,QAAQqE,aAAa,uCAIjCzE,KAAKI,QAAQsE,aAAa,OAAQ,uCAIlC1E,KAAKI,QAAQuE,gBAAgB,6EAGbC,6GACV9E,EAAkBI,qCAElB2E,EAAOD,EAAEE,eACTC,EAASF,EAAKpE,cAAc,WAC3BuE,UAAW,EAClBJ,EAAEK,iBAEInC,EAAMoC,MAAMC,UAAUC,MAAMb,MAAMM,EAAKQ,iBAAiB,mBACrDC,KACG,SAACC,GAAD,OACA9B,mBAAmB8B,EAAGC,MAAQ,IAAM/B,mBAAmB8B,EAAGE,UAE7DC,KAAK,cAER1F,KAAKkE,gBAAgBpB,GAAK6C,MAC5B,WACIZ,EAAOa,YAAc,UAEzB,sBAEJb,EAAOtE,cAAc,UAAUuE,UAAW,oQCzGlDa,EAAOC,QAAU","sources":["./src/contactDialog.ctrl.ts","./node_modules/@parcel/runtime-js/lib/bundles/71d92518c87395cc89a5fa504d171e3d.js"],"sourcesContent":["import tpl from 'bundle-text:./contactDialog.tpl.html';\nimport './_contactDialog.scss';\n\nexport class ContactDialogCtrl {\n    static grecaptchaScriptLoader: Promise<HTMLElement>;\n\n    private grecaptchaCallbackResolver: (token: string)=> void = () => {};\n    element: HTMLDialogElement;\n\n    constructor () {\n        if (!ContactDialogCtrl.grecaptchaScriptLoader) this.createScriptElement();\n        this.element = document.createElement('dialog');\n        this.element.innerHTML = tpl;\n        this.element.querySelector('.dialog__btn-close').addEventListener('click', this.hide.bind(this));\n\n        this.element.querySelector<HTMLFormElement>('.gform').addEventListener('submit', this.onFormSubmit.bind(this))\n    }\n    \n    private createScriptElement () {\n        ContactDialogCtrl.grecaptchaScriptLoader = new Promise((resolve) => {\n            const script = document.createElement('script');\n            script.onload = () => {\n                const container = document.createElement('div');\n                container.className = 'grecaptcha-wrapper';\n                document.body.appendChild(container);\n                (window as any).grecaptcha.ready(() => {\n                    (window as any).grecaptcha.render(container, {\n                        sitekey: '6LdQaM8ZAAAAAJwBCtGEYIyh9u6be1rBOlsd-FWj',\n                        size: 'invisible',\n                        callback: (token) => this.grecaptchaCallbackResolver(token)\n                    });\n                    resolve();\n                });\n            };\n            script.src = 'https://www.google.com/recaptcha/api.js?render=explicit';\n            script.defer = true;\n            script.async = true;\n\n            document.body.appendChild(script);\n        });\n    }\n\n    private async executeGrecaptcha () {\n       const token = await new Promise<string>((resolve) => {\n            this.grecaptchaCallbackResolver = resolve;\n           (window as any).grecaptcha.execute();\n        });\n        (window as any).grecaptcha.reset();\n\n        return token;\n    }\n\n    private async sendContactData (data: string, attempt = 0) {\n        return new Promise(async (resolve, reject) => {\n            const url = 'https://script.google.com/macros/s/AKfycbzrISB5QwRuuwGTgkxgKp7DGENDHPcxZTcka2_LRQ0zULSf5Ec/exec?' + data;\n\n            const token = await this.executeGrecaptcha();\n            const req = new XMLHttpRequest();\n            req.open('POST', url + '&token=' + encodeURIComponent(token));\n            req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n            req.onreadystatechange = () => {\n                if(req.readyState === 4 && req.status === 200) {\n                    const res = JSON.parse(req.responseText);\n                    if (res.result === 'success') return resolve();\n                    else if (++attempt < 3) resolve(this.sendContactData(data, attempt))\n                    else reject();\n                }\n            }\n            req.send();\n        });\n    }\n\n    isShown () {\n        return this.element.getAttribute('open') === 'open';\n    }\n\n    show() {\n        this.element.setAttribute('open', 'open');\n    }\n\n    hide() {\n        this.element.removeAttribute('open');\n    }\n\n    async onFormSubmit (e: Event) {\n        await ContactDialogCtrl.grecaptchaScriptLoader;\n\n        const form = e.currentTarget as HTMLFormElement;\n        const button = form.querySelector('button');\n        button.disabled = true;\n        e.preventDefault();\n\n        const url = Array.prototype.slice.apply(form.querySelectorAll('input,textarea'))\n                .map(\n                    (el: HTMLInputElement | HTMLTextAreaElement) =>\n                    encodeURIComponent(el.name) + '=' + encodeURIComponent(el.value)\n                )\n                .join('&');\n\n        await this.sendContactData(url).then(\n            () => {\n                button.textContent = 'THX!';\n            },\n            () => {}\n        );\n        button.querySelector('button').disabled = false;\n    }\n}\n",null],"names":["_contactDialogTpl","require","ContactDialogCtrl","_classCallCheck","this","_defineProperty","grecaptchaScriptLoader","createScriptElement","element","document","createElement","innerHTML","tpl","querySelector","addEventListener","hide","bind","onFormSubmit","_this","Promise","resolve","script","onload","container","className","body","appendChild","window","grecaptcha","ready","render","sitekey","size","callback","token","grecaptchaCallbackResolver","src","defer","async","_this2","execute","reset","data","attempt","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee2","reject","url","req","wrap","_context2","prev","next","_this3","executeGrecaptcha","sent","XMLHttpRequest","open","encodeURIComponent","setRequestHeader","onreadystatechange","readyState","status","JSON","parse","responseText","result","sendContactData","send","stop","_x2","_x3","apply","arguments","getAttribute","setAttribute","removeAttribute","e","form","currentTarget","button","disabled","preventDefault","Array","prototype","slice","querySelectorAll","map","el","name","value","join","then","textContent","module","exports"],"version":3,"file":"contactDialog.ctrl.fd2825d4.js.map"}