{"mappings":"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","sources":["src/contactDialog/index.ts","../../node_modules/.pnpm/@parcel+runtime-js@2.8.0/node_modules/@parcel/runtime-js/lib/runtime-76627a958fb3cac9.js"],"sourcesContent":["import tplUrl from \"url:./tpl.html\";\nimport \"./_styles.scss\";\n\nexport class ContactDialogCtrl {\n    static grecaptchaScriptLoader: Promise<void>;\n    static templateLoader: Promise<Response>;\n\n    private grecaptchaCallbackResolver: (token: string) => void = () => {};\n    element: HTMLDialogElement;\n\n    constructor() {\n        if (!ContactDialogCtrl.grecaptchaScriptLoader)\n            this.createScriptElement();\n\n        this.element = document.createElement(\"dialog\");\n        this.setupDialogElement(this.element);\n    }\n\n    private async setupDialogElement(element: HTMLDialogElement) {\n        if (!ContactDialogCtrl.templateLoader)\n            ContactDialogCtrl.templateLoader = fetch(tplUrl);\n        const tplResponse = await ContactDialogCtrl.templateLoader;\n\n        element.innerHTML = await tplResponse.text();\n        element.querySelectorAll(\"input,textarea\").forEach((inputEl) => {\n            inputEl.setAttribute(\"placeholder\", \" \"); // to let 'placeholder-shown' styling to kick in\n        });\n        element\n            .querySelector(\".dialog__btn-close\")!\n            .addEventListener(\"click\", this.hide.bind(this));\n\n        element\n            .querySelector<HTMLFormElement>(\".gform\")!\n            .addEventListener(\"submit\", this.onFormSubmit.bind(this));\n\n        this.element = element;\n    }\n\n    private createScriptElement() {\n        ContactDialogCtrl.grecaptchaScriptLoader = new Promise<void>(\n            (resolve) => {\n                const script = document.createElement(\"script\");\n                script.onload = () => {\n                    const container = document.createElement(\"div\");\n                    container.className = \"grecaptcha-wrapper\";\n                    document.body.appendChild(container);\n                    (window as any).grecaptcha.ready(() => {\n                        (window as any).grecaptcha.render(container, {\n                            sitekey: \"6LdQaM8ZAAAAAJwBCtGEYIyh9u6be1rBOlsd-FWj\",\n                            size: \"invisible\",\n                            callback: (token: string) =>\n                                this.grecaptchaCallbackResolver(token),\n                        });\n                        resolve();\n                    });\n                };\n                script.src =\n                    \"https://www.google.com/recaptcha/api.js?render=explicit\";\n                script.defer = true;\n                script.async = true;\n\n                document.body.appendChild(script);\n            }\n        );\n    }\n\n    private async executeGrecaptcha() {\n        const token = await new Promise<string>((resolve) => {\n            this.grecaptchaCallbackResolver = resolve;\n            (window as any).grecaptcha.execute();\n        });\n        (window as any).grecaptcha.reset();\n\n        return token;\n    }\n\n    private async sendContactData(data: string, attempt = 0) {\n        return new Promise<void>(async (resolve, reject) => {\n            const url =\n                \"https://script.google.com/macros/s/AKfycbzrISB5QwRuuwGTgkxgKp7DGENDHPcxZTcka2_LRQ0zULSf5Ec/exec?\" +\n                data;\n\n            const token = await this.executeGrecaptcha();\n            const req = new XMLHttpRequest();\n            req.open(\"POST\", url + \"&token=\" + encodeURIComponent(token));\n            req.setRequestHeader(\"Content-type\", \"text/plain;charset=utf-8\");\n            req.onreadystatechange = () => {\n                if (req.readyState === 4) {\n                    if (req.status === 200) {\n                        const res = JSON.parse(req.responseText);\n                        if (res.result === \"success\") return resolve();\n                        else if (++attempt < 3)\n                            resolve(this.sendContactData(data, attempt));\n                        else reject();\n                    } else reject();\n                }\n            };\n            req.send();\n        });\n    }\n\n    isShown() {\n        return this.element.getAttribute(\"open\") === \"open\";\n    }\n\n    show() {\n        requestAnimationFrame(() => {\n            this.element.setAttribute(\"open\", \"open\");\n        });\n    }\n\n    hide() {\n        this.element.removeAttribute(\"open\");\n    }\n\n    async onFormSubmit(e: Event) {\n        await ContactDialogCtrl.grecaptchaScriptLoader;\n\n        const form = e.currentTarget as HTMLFormElement;\n        const button = form.querySelector(\"button\")!;\n        button.disabled = true;\n        e.preventDefault();\n\n        const url = Array.prototype.slice\n            .apply(form.querySelectorAll(\"input,textarea\"))\n            .map(\n                (el: HTMLInputElement | HTMLTextAreaElement) =>\n                    encodeURIComponent(el.name) +\n                    \"=\" +\n                    encodeURIComponent(el.value)\n            )\n            .join(\"&\");\n\n        await this.sendContactData(url).then(\n            () => {\n                button.textContent = \"THX!\";\n                button.classList.remove(\"fill\");\n                button.classList.add(\"pe-n\");\n            },\n            () => {}\n        );\n        button.disabled = false;\n    }\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('iGomz') + require('./helpers/bundle-manifest').resolve(\"6kmWC\");"],"names":["parcelHelpers","require","export","exports","ContactDialogCtrl","_tplHtml","grecaptchaCallbackResolver","constructor","grecaptchaScriptLoader","this","createScriptElement","element","document","createElement","setupDialogElement","async","templateLoader","fetch","_tplHtmlDefault","default","tplResponse","innerHTML","text","querySelectorAll","forEach","inputEl","setAttribute","querySelector","addEventListener","hide","bind","onFormSubmit","Promise","resolve","script","onload","container","className","body","appendChild","window","grecaptcha","ready","render","sitekey","size","callback","token","src","defer","execute","reset","data","attempt","reject","url","executeGrecaptcha","req","XMLHttpRequest","open","encodeURIComponent","setRequestHeader","onreadystatechange","readyState","status","JSON","parse","responseText","result","sendContactData","send","isShown","getAttribute","show","requestAnimationFrame","removeAttribute","e","form","currentTarget","button","disabled","preventDefault","Array","prototype","slice","apply","map","el","name","value","join","then","textContent","classList","remove","add","module","getBundleURL"],"version":3,"file":"contactDialog.c3731e0f.js.map"}