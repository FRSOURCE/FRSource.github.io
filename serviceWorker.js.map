{"mappings":"wsCAGA,EAHAA,EAAA,0BAGAC,WAFiB,CAAC,cAAc,yCAAyC,sCAAsC,kDAAkD,8CAA8C,sCAAsC,+CAA+C,wCACpR,4B,6DCFhB,IAAAC,EAAAF,EAAA,kD,kDAAWG,I,0BACAC,IAGXF,EAAAG,OAAAC,EAAA,iBAAgBL,IAJT,IAAIE,EAAW,GACXC,EAAU,GAGd,SAASH,EAAUM,EAAGC,GAC3BL,EAAWI,EACXH,EAAUI,CACZ,C,qFCPAF,EAAQG,eAAiB,SAAUC,GACjC,OAAOA,GAAKA,EAAEC,WAAaD,EAAI,CAACE,QAASF,EAC3C,EAEAJ,EAAQO,kBAAoB,SAAUH,GACpCI,OAAOC,eAAeL,EAAG,aAAc,CAACM,OAAO,GACjD,EAEAV,EAAQW,UAAY,SAAUC,EAAQC,GAcpC,OAbAL,OAAOM,KAAKF,GAAQG,SAAQ,SAAUC,GACxB,YAARA,GAA6B,eAARA,GAAwBH,EAAKI,eAAeD,IAIrER,OAAOC,eAAeI,EAAMG,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,EAChB,GAEJ,IAEOH,CACT,EAEAb,EAAQD,OAAS,SAAUc,EAAMO,EAAUD,GACzCX,OAAOC,eAAeI,EAAMO,EAAU,CACpCF,YAAY,EACZC,IAAKA,GAET,C,6BC1BA,IAAAE,EAAA3B,EAAA,0BAGA,MAAM4B,EAAmB,CAAC,IAAK,eAEzBC,EAAa,kBAAoBF,EAAAvB,QAEjC0B,EAAYC,KAElBJ,EAAAxB,SAAY6B,QACR,0FACA,oEACA,0HACA,oBACA,qBACA,eACA,qBACA,cACA,eAIJF,EAAUG,iBAAiB,WAAYC,IAEnCA,EAAMC,UACFC,OAAOC,KAAKR,GAAYS,MAAMC,GAAUA,EAAMC,OAAOb,EAAAxB,YAAU,IAMvE2B,EAAUG,iBAAiB,YAAaC,IACpCA,EAAMC,UACFC,OAAOhB,OAAOkB,MAAMlB,GAChBqB,QAAQC,IACJtB,EAEKuB,QAAQrB,GAAQA,IAAQO,IACxBe,KAAKtB,GAAQc,OAAOS,OAAOvB,QAAA,IAMhDQ,EAAUG,iBAAiB,SAAS,SAAUC,GAC1CA,EAAMY,YACF,WACI,IAAKZ,EAAMa,SAAU,OAAOC,MAAMd,EAAMe,SAExC,MAAMC,QAAepB,EAAUqB,QAAQ1B,IAAIS,EAAMa,UACjD,IAAKG,EAAQ,OAAOF,MAAMd,EAAMe,SAGhC,MAAMG,EAAY,IAAIC,IAAIH,EAAOI,KACjC,IAAK1B,EAAiB2B,SAASH,EAAUI,UACrC,OAAOR,MAAMd,EAAMe,SAEvB,MAAMQ,QAAuBrB,OACxBsB,MAAMxB,EAAMe,SACZU,OAAM,KAAW,IAEtB,GAAIF,EAAgB,OAAOA,EAE3B,MAAMG,QAAwBZ,MAAMd,EAAMe,SAASU,OAC/C,KAAW,IAGf,IAAKC,EAED,OADAC,QAAQC,IAAI,mBAAoB5B,GACzB,IAAI6B,SAGf,WACwB3B,OAAOC,KAAKR,IAG1BmC,IAAI9B,EAAMe,QAASW,EAAgBK,QAG7C,CAFE,MAAOC,GACLL,QAAQC,IAAI,oCAAqC5B,EAAOgC,EAC5D,CACA,OAAON,CACX,EAnCA,GAqCR,G","sources":["../../node_modules/.pnpm/@parcel+service-worker@2.8.1/node_modules/@parcel/service-worker/runtime-2efa87a604341a90.js","../../node_modules/.pnpm/@parcel+service-worker@2.8.1/node_modules/@parcel/service-worker/service-worker.js","../../node_modules/.pnpm/@parcel+transformer-js@2.8.0_@parcel+core@2.8.0/node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/serviceWorker.ts"],"sourcesContent":["import {_register} from '@parcel/service-worker';\nconst manifest = [\"/index.html\",\"/favicon.6262c1fb.svg\",\"/index.accd1e6a.js\",\"/ResizeObserver.es.3162562e.js\",\"/contactDialog.c3731e0f.js\",\"/tpl.7f3037e4.html\",\"/contactDialog.c43a6985.css\",\"/index.436676f7.css\"];\nconst version = \"0fbfdf21\";\n_register(manifest, version);\n","export let manifest = [];\nexport let version = '';\n\n// Called by the runtime.\nexport function _register(m, v) {\n  manifest = m;\n  version = v;\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"WebWorker\" />\n\nimport { manifest as urlsToCache, version } from \"@parcel/service-worker\";\n\n// pages that are controlled by this service worker\nconst PAGES_TO_CONTROL = [\"/\", \"/index.html\"];\n\nconst CACHE_NAME = \"frsource-cache-\" + version;\n\nconst typedSelf = self as ServiceWorkerGlobalScope & typeof globalThis;\n\nurlsToCache.unshift(\n    \"https://www.frsource.org/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js\",\n    \"https://fonts.googleapis.com/css2?family=Inconsolata&display=swap\",\n    \"https://fonts.gstatic.com/s/inconsolata/v20/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WR32kXWdycuJDA.woff\",\n    \"/site.webmanifest\",\n    \"/browserconfig.xml\",\n    \"/favicon.ico\",\n    \"/favicon-32x32.png\",\n    \"/robots.txt\",\n    \"/humans.txt\"\n);\n\n// Listen for the install event, which fires when the service worker is being installed\ntypedSelf.addEventListener(\"install\", (event) => {\n    // wait with finishing of the installation until initial caching of statically provided file paths is done\n    event.waitUntil(\n        caches.open(CACHE_NAME).then((cache) => cache.addAll(urlsToCache))\n    );\n});\n\n// Activate is when the service worker actually takes over from the previous\n// version, which is a good time to clean up old caches\ntypedSelf.addEventListener(\"activate\", (event) => {\n    event.waitUntil(\n        caches.keys().then((keys) =>\n            Promise.all(\n                keys\n                    // Remove any cache entry that not matches the current cache name\n                    .filter((key) => key !== CACHE_NAME)\n                    .map((key) => caches.delete(key))\n            )\n        )\n    );\n});\n\ntypedSelf.addEventListener(\"fetch\", function (event) {\n    event.respondWith(\n        (async () => {\n            if (!event.clientId) return fetch(event.request);\n\n            const client = await typedSelf.clients.get(event.clientId);\n            if (!client) return fetch(event.request);\n\n            // don't intercept calls coming outside of your scope\n            const clientURL = new URL(client.url);\n            if (!PAGES_TO_CONTROL.includes(clientURL.pathname))\n                return fetch(event.request);\n\n            const cachedResponse = await caches\n                .match(event.request)\n                .catch(() => void 0);\n\n            if (cachedResponse) return cachedResponse;\n\n            const fetchedResponse = await fetch(event.request).catch(\n                () => void 0\n            );\n\n            if (!fetchedResponse) {\n                console.log(\"Failed to fetch:\", event);\n                return new Response();\n            }\n\n            try {\n                const cache = await caches.open(CACHE_NAME);\n                // We have to clone the response as response streams can only be read once\n                // This way we can put one copy in the cache and return the other to the browser\n                cache.put(event.request, fetchedResponse.clone());\n            } catch (e) {\n                console.log(\"Failed to store response in cache\", event, e);\n            }\n            return fetchedResponse;\n        })()\n    );\n});\n"],"names":["require","_register","parcelHelpers","manifest","version","export","exports","m","v","interopDefault","a","__esModule","default","defineInteropFlag","Object","defineProperty","value","exportAll","source","dest","keys","forEach","key","hasOwnProperty","enumerable","get","destName","_serviceWorker","PAGES_TO_CONTROL","CACHE_NAME","typedSelf","self","unshift","addEventListener","event","waitUntil","caches","open","then","cache","addAll","Promise","all","filter","map","delete","respondWith","clientId","fetch","request","client","clients","clientURL","URL","url","includes","pathname","cachedResponse","match","catch","fetchedResponse","console","log","Response","put","clone","e"],"version":3,"file":"serviceWorker.js.map"}